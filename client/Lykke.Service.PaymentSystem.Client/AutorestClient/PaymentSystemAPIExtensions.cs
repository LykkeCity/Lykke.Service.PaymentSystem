// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.PaymentSystem.Client.AutorestClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PaymentSystemAPI.
    /// </summary>
    public static partial class PaymentSystemAPIExtensions
    {
            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object IsAlive(this IPaymentSystemAPI operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsAliveAsync(this IPaymentSystemAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='amount'>
            /// </param>
            /// <param name='clientPaymentSystem'>
            /// </param>
            /// <param name='orderId'>
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='assetId'>
            /// </param>
            /// <param name='walletId'>
            /// </param>
            /// <param name='isoCountryCode'>
            /// </param>
            /// <param name='otherInfoJson'>
            /// </param>
            public static PaymentUrlDataResponse PostPaymentUrlData(this IPaymentSystemAPI operations, double amount, string clientPaymentSystem = default(string), string orderId = default(string), string clientId = default(string), string assetId = default(string), string walletId = default(string), string isoCountryCode = default(string), string otherInfoJson = default(string))
            {
                return operations.PostPaymentUrlDataAsync(amount, clientPaymentSystem, orderId, clientId, assetId, walletId, isoCountryCode, otherInfoJson).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='amount'>
            /// </param>
            /// <param name='clientPaymentSystem'>
            /// </param>
            /// <param name='orderId'>
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='assetId'>
            /// </param>
            /// <param name='walletId'>
            /// </param>
            /// <param name='isoCountryCode'>
            /// </param>
            /// <param name='otherInfoJson'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PaymentUrlDataResponse> PostPaymentUrlDataAsync(this IPaymentSystemAPI operations, double amount, string clientPaymentSystem = default(string), string orderId = default(string), string clientId = default(string), string assetId = default(string), string walletId = default(string), string isoCountryCode = default(string), string otherInfoJson = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostPaymentUrlDataWithHttpMessagesAsync(amount, clientPaymentSystem, orderId, clientId, assetId, walletId, isoCountryCode, otherInfoJson, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
